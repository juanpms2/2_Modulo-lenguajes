{"version":3,"sources":["main.js"],"names":["console","log","myArray","myArray2","head","first","tail","rest","toString","init","array","x","length","slice","join","last","concat","array1","array2","concat2","obj","name","age","clone","source","clone2","args","Object","assign","clone3","JSON","parse","stringify","surname","country","target","married","merge","books","title","isRead","isBookRead","titulo","book","find"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["// EJERCICIO 1 - ARRAY OPERATION\r\nconsole.log(\"EJERCICIO 1 - ARRAY OPERATION\");\r\n\r\nconst myArray = [ 1, 2, 3, 4, 5 ];\r\nconst myArray2 = [ \"hello\", \"world\" ];\r\n\r\n// Implementa una función head (inmutable), tal que, dado un array como entrada extraiga y devuelva su primer elemento. Utiliza destructuring.\r\n \r\nconst head = ( [ first ] ) => first;\r\nconsole.log( head( myArray ) );\r\n\r\n\r\n// Implementa una función tail (inmutable), tal que, dado un array como entrada devuelta todos menos el primer elemento. Utiliza rest operator.\r\n\r\nconst tail = ( [ , ...rest ] ) => rest.toString();\r\nconsole.log( tail( myArray ) );\r\n\r\n\r\n// Implementa una función init (inmutable), tal que, dado un array como entrada devuelva todos los elementos menos el último. Utiliza los métodos que ofrece Array.prototype.\r\n\r\nconst init = ( [...array] ) => {\r\n    const x = array.length - 1;\r\n    return array.slice( 0, x ).join( '-' );\r\n}\r\nconsole.log( init(myArray) );\r\n\r\n\r\n// Implementa una función last (inmutable), tal que, dado un array como entrada devuelva el último elemento.\r\n\r\nconst last = ( [...array] ) => {\r\n    const x = array.length - 1;\r\n    return array.slice( x ).toString();\r\n}\r\nconsole.log( last( myArray ) );\r\n\r\n\r\n\r\n// EJERCICIO 2 - CONCAT\r\nconsole.log(\"EJERCICIO 2 - CONCAT\");\r\n\r\n// Implementa una función concat (inmutable) tal que, dados 2 arrays como entrada,devuelva la concatenación de ambos. Utiliza rest / spread operators.\r\n\r\nconst concat = ( array1, array2 ) =>  array1.concat( array2 ).join(' ');\r\nconsole.log( concat( myArray, myArray2 ) );\r\n\r\n//Implementa una versión del ejercicio anterior donde se acepten múltiples arrays de entrada (más de 2).\r\n\r\nconst concat2 = ( ...args ) => [].concat(...args).join(' ');\r\nconsole.log( concat2( myArray, myArray2, [0,0,0], [1,1,1] ) );\r\n\r\n\r\n\r\n// EJERCICIO 3 - CLONE MERGE\r\nconsole.log(\"EJERCICIO 3 - CLONE MERGE\");\r\n\r\n// Implementa una función clone que, a partir de un objeto de entrada source devuelva un nuevo objeto con las propiedades de source.\r\n\r\nconst obj = { name: \"John\", age: 32 };\r\n\r\nconst clone = ( source ) => ( { ...source } );\r\nconsole.log( clone(obj) );\r\n\r\n// dos maneras más\r\nconst clone2 = ( source, ...args ) =>  Object.assign( {}, ...args, source );\r\nconst clone3 = ( source ) => JSON.parse( JSON.stringify( source ) ); //Deep clone\r\nconsole.log( clone2(obj) );\r\nconsole.log( clone3(obj) );\r\n\r\n\r\n// Implementa una función merge que, dados dos objetos de entrada source y target,devuelva un nuevo objeto con todas las propiedades de target y de source, y en caso de propiedades con el mismo nombre, source sobreescribe a target.\r\n\r\nconst source = { name:\"Maria\", surname:\"Ibañez\", country:\"SPA\" };\r\nconst target = { name:\"Luisa\", age:31, married:true };\r\n\r\nconst merge = ( source, target ) => ( { ...target, ...source } );\r\nconsole.log( merge( source,target ) );\r\n\r\n\r\n\r\n\r\n// EJERCICIO 4 - READ BOOKS\r\nconsole.log(\"EJERCICIO 4 - READ BOOKS\");\r\n\r\n// Crea una función isBookRead que reciba una lista de libros y un título y devuelva si se ha leído o no dicho libro.\r\n// Un libro es un objeto con title como string y isRead como booleano. En caso de no existir el libro devolver false.\r\n\r\nconst books = [\r\n    { title: \"Harry Potter y la piedra filosofal\", isRead: true },\r\n    { title: \"Canción de hielo y fuego\", isRead: false },\r\n    { title: \"Devastación\", isRead: true },\r\n];\r\n\r\nconst isBookRead = ( books, titulo ) => {\r\n\r\n    // const book = books.find( title => title.title === titulo ) || false;\r\n\r\n    // if ( book.title === titulo ) {  \r\n    //         if (book.isRead === true) {\r\n    //             return `El libro ${ titulo } ha sido leido por eso devuelvo true `;\r\n    //         } else {\r\n    //             return `El libro ${ titulo } no ha sido leido por eso devuelvo false`;\r\n    //         }\r\n        \r\n    // } else {\r\n        \r\n    //     return `El libro ${ titulo } no existe en nuestra base de datos`;\r\n    // }\r\n    const book = books.find(book => book.title === titulo);\r\n    if(book) {\r\n        return book.isRead ? `El libro ${titulo} ha sido leido por eso devuelvo true` : `El libro ${titulo} no ha sido leido por eso devuelvo false`;\r\n    } else {\r\n        \r\n        return `El libro ${ titulo } no existe en nuestra base de datos`;\r\n    }\r\n}; \r\n\r\n\r\nconsole.log(isBookRead(books, \"Canción de hielo y fuego\"));\r\n\r\n"]}